<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron&nbsp;school | Mike Cavs' blog]]></title>
  <link href="http://mcavaioni.github.io/blog/categories/flatiron-school/atom.xml" rel="self"/>
  <link href="http://mcavaioni.github.io/"/>
  <updated>2015-10-04T15:43:40-04:00</updated>
  <id>http://mcavaioni.github.io/</id>
  <author>
    <name><![CDATA[Mike Cavs]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Everything Is an Object - Array Method REPLACE.]]></title>
    <link href="http://mcavaioni.github.io/blog/2015/10/04/my-first-post-on-octopress/"/>
    <updated>2015-10-04T13:14:41-04:00</updated>
    <id>http://mcavaioni.github.io/blog/2015/10/04/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<p>One of the first things you learn when dealing with Ruby is that everything is an object.
(well, except for: def, if, end ).</p>

<p>This seems like a simple concept, but it hides a very important meaning that sometimes we forget when doing a simple operation.
Let&rsquo;s take for example on methods we can use on an array: REPLACE.
Replace, as the word implies, replace the content of an array with the content of another one.
Let&rsquo;s visualize this one in our CLI.</p>

<p>Let&rsquo;s create a new array:</p>

<blockquote><p>  a = [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]</p></blockquote>

<p>=>  [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]</p>

<p>So, now if we want to see what &ldquo;a&rdquo; is we type &ldquo;as&rdquo; in our terminal we get the following:</p>

<blockquote><p>  a</p></blockquote>

<p>=>  [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]</p>

<p>Let&rsquo;s now create another array which is equal to our original one, so:</p>

<blockquote><p>  b = a</p></blockquote>

<p>=>  [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]</p>

<p>As we can see &ldquo;b&rdquo; got assigned to same object of our original array &ldquo;a&rdquo;.</p>

<p>What happens if we now apply our method &ldquo;REPLACE&rdquo; to our array &ldquo;a&rdquo; ? and what happens to &ldquo;b&rdquo;?</p>

<blockquote><p>  a.replace([1,2,3])</p></blockquote>

<p>=>  [1,2,3]</p>

<blockquote><p>  a</p></blockquote>

<p>=>  [1,2,3]</p>

<blockquote><p>  b</p></blockquote>

<p>=>  [1,2,3]</p>

<p>Cool. Yes that easy. I just replaced the content of &ldquo;a&rdquo; and since &ldquo;b&rdquo; is pointing to the same object, also his content has changed.</p>

<p>But what happens when I reassign &ldquo;a&rdquo;?</p>

<blockquote><p>  a = [&ldquo;I&rdquo;, &ldquo;am&rdquo;, &ldquo;another&rdquo;, &ldquo;object&rdquo;]</p></blockquote>

<p>=>  [&ldquo;I&rdquo;, &ldquo;am&rdquo;, &ldquo;another&rdquo;, &ldquo;object&rdquo;]</p>

<blockquote><p>  a</p></blockquote>

<p>=>  [&ldquo;I&rdquo;, &ldquo;am&rdquo;, &ldquo;another&rdquo;, &ldquo;object&rdquo;]</p>

<p>Is &ldquo;b&rdquo; going to change? Remember, everything is an object in Ruby!
Let&rsquo;s see:</p>

<blockquote><p>  b</p></blockquote>

<p>=>  [1,2,3]</p>

<p>At first I got confused, but then I went back to my terminal and looked at the &ldquo;object_id&rdquo; of my objects as I was creating them.
Let&rsquo;s do it again.</p>

<blockquote><p>  a = [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]</p></blockquote>

<p>=>  [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]</p>

<blockquote><p>  a.object_id</p></blockquote>

<p>=>  70312125383000</p>

<blockquote><p>  b = a</p></blockquote>

<p>=>  [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]</p>

<p>=>  b.object_id</p>

<p>=>  70312125383000</p>

<p>&ldquo;a&rdquo; and &ldquo;b&rdquo; are pointing to the same object (which is an array and it happens to have ID= 70312125383000; the content of this object is [&ldquo;cat&rdquo;, &ldquo;dog&rdquo;, &ldquo;mouse&rdquo;]).
When I use the method &ldquo;REPLACE&rdquo; on &ldquo;a&rdquo; I just happen to change the content of the object. Just that.
So when I assign a variable (in this case &ldquo;a&rdquo;) to an object I basically point this variable to a bucket (that has the &ldquo;shape&rdquo; of an array) which contains a bag (inside this bag I put a &ldquo;cat&rdquo;, a &ldquo;dog&rdquo;, a &ldquo;mouse&rdquo;).</p>

<p>When I apply my method &ldquo;REPLACE&rdquo; I basically just replace the bag inside my bucket array with another content (now containing the numbers 1,2,3). But the bucket itself does not change. Infact it&rsquo;s ID is still the same. Let&rsquo;s see:</p>

<blockquote><p>  a.replace([1,2,3])</p></blockquote>

<p>=>  [1,2,3]</p>

<blockquote><p>  a</p></blockquote>

<p>=>  [1,2,3]</p>

<blockquote><p>  a.object_id</p></blockquote>

<p>=>  70312125383000</p>

<blockquote><p>  b</p></blockquote>

<p>=>  [1,2,3]</p>

<blockquote><p>  b.object_id</p></blockquote>

<p>=>  70312125383000</p>

<p>Now, instead, when I reassign &ldquo;a&rdquo; to another array I basically point &ldquo;a&rdquo; to another object, still an object array, with another bag inside which contains &ldquo;I&rdquo;, &ldquo;am&rdquo;, &ldquo;another&rdquo;, &ldquo;object&rdquo;.
This is now a totally different object. In fact if we look in terminal the object ID associated to this array object is different!</p>

<blockquote><p>  a = [&ldquo;I&rdquo;, &ldquo;am&rdquo;, &ldquo;another&rdquo;, &ldquo;object&rdquo;]</p></blockquote>

<p>=>  [&ldquo;I&rdquo;, &ldquo;am&rdquo;, &ldquo;another&rdquo;, &ldquo;object&rdquo;]</p>

<blockquote><p>  a.object_id</p></blockquote>

<p>=>  70312117660040</p>

<p>What happens to b? b is still pointing to the previous object array. It&rsquo;s content hasn&rsquo;t changed.
In fact:</p>

<blockquote><p>  b.object_id</p></blockquote>

<p>=>  70312125383000</p>

<p>Which is the same as before!</p>

<p>To recap, everything is an object! an object is like a bucket identified by it&rsquo;s ID and it contains a bag. Inside a bag I can add, remove, replace content.
When I assign a variable I point that variable to an object. If another variable is equal to the first one created, then I assign it to the same object.
The method &ldquo;REPLACE&rdquo; change only the content of my object (the bag inside the bucket) and doesn&rsquo;t affect the binding between the two variables.
When I, instead, reassign the initial variable to another object I basically remove the binding between the two variables and now they are pointing to two completely different object.</p>
]]></content>
  </entry>
  
</feed>
